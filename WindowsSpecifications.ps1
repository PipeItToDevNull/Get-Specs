# TechSupport powershell-specifications script
# Writen by PipeItToDevNull

#Start recording output
Start-Transcript "TechSupport_Specs.txt"
Get-Date
Write-Host "`n" -NoNewline

#Pull basic OS information
Write-Host "Edition:" -NoNewline $(Get-Item "HKLM:\Software\Microsoft\Windows NT\CurrentVersion").GetValue("ProductName")
Write-Host "Build:" -NoNewline $(Get-Item "HKLM:SOFTWARE\Microsoft\Windows NT\CurrentVersion").GetValue("ReleaseID")
Write-Host "`n" -NoNewline

#Define function to get CPU model
function Get-CPU{
    $CPUInfo = Get-WmiObject Win32_Processor
    $CPU = $CPUInfo.Name
    return $CPU
}
Write-Host "CPU: " -NoNewline
Get-CPU
Write-Host "`n" -NoNewline

#Define function to get temperature of CPU
function Get-Temperature {
    $t = Get-WmiObject MSAcpi_ThermalZoneTemperature -Namespace "root/wmi" -ErrorAction SilentlyContinue
    $returntemp = @()
    if ($t){
        foreach ($temp in $t.CurrentTemperature) {
            $currentTempKelvin = $temp / 10
            $currentTempCelsius = $currentTempKelvin - 273.15

            $currentTempFahrenheit = (9/5) * $currentTempCelsius + 32

            $returntemp += $currentTempCelsius.ToString() + " C : " + $currentTempFahrenheit.ToString() + " F : " + $currentTempKelvin + "K"  
        }
    }
    else {
        $returntemp = "Not supported"
        }
    return $returntemp
}
Write-Host "CPU Temperature: " -NoNewline
Get-Temperature
Write-Host "`n" -NoNewline

#Define function to get motherboard model
function Get-Mobo{
    $moboBase = Get-WmiObject Win32_BaseBoard
    $moboMan = $moboBase.manufacturer
    $moboMod = $moboBase.product
    $mobo = $moboMan + " | " + $moboMod
    return $mobo
}
Write-Host "Motherboard: " -NoNewline
Get-Mobo
Write-Host "`n" -NoNewline

#Define function to get GPU model
function Get-GPU {
    $GPUbase = Get-WmiObject Win32_VideoController
    $GPUname = $GPUbase.Name
    $GPU= $GPUname + " at " + $GPUbase.CurrentHorizontalResolution + "x" + $GPUbase.CurrentVerticalResolution
    return $GPU
}
Write-Host "Graphics Card: " -NoNewline
Get-GPU
Write-Host "`n" -NoNewline

#Get list of installed updates
Write-Host "Installed updates:"
Get-HotFix |format-table -auto Description,HotFixID,InstalledOn
Write-Host "`n" -NoNewLine

#Get current users startup tasks and items
function Get-Startup {
    $startBase = Get-CimInstance Win32_StartupCommand
    $startNames = $startBase.Caption
    return $startNames
}
Write-Host "Startup Tasks for user: "
Get-Startup
Write-Host "`n" -NoNewline

#Get current users running processes
function Get-Processes {
    $procBase = Get-Process
    $procTrash = $procBase.ProcessName
    $procClean = $procTrash | select -Unique
    return $procClean
}
Write-Host "Running processes: "
Get-Processes
Write-Host "`n" -NoNewline

#Get system services and states
Write-Host "Services: " -NoNewline
Get-Service | Format-Table -auto
Write-Host "`n" -NoNewline

#Get Installed apps
function Get-InstalledApplications {
    $installedBase = Get-ItemProperty HKLM:\Software\Wow6432Node\Microsoft\Windows\CurrentVersion\Uninstall\*
    $installedClean = $installedBase.DisplayName
    return $installedClean
}
Write-Host "Installed Apps: "
Get-InstalledApplications
Write-Host "`n" -NoNewline

#Get disk health and layouts
Write-Host "Disk layouts:"
Get-Partition|format-table -auto
Get-Volume|format-table -auto
Write-Host "`n" -NoNewline

#Get network adapter information
Write-Host "Network adapters:"
Get-NetAdapter|format-list Name,InterfaceDescription,Status,LinkSpeed
Get-NetIPAddress|format-table -auto IpAddress,InterfaceAlias,PrefixOrigin
Write-Host "`n" -NoNewline

#Get drivers and devices
Write-Host "Drivers and device versions:" -NoNewline
gwmi Win32_PnPSignedDriver | format-table -auto devicename,driverversion

Stop-transcript

#Call the outputted file from above and then send it to pastebin server
$FilePath = '.\TechSupport_Specs.txt'
$link = Invoke-WebRequest -ContentType 'text/plain' -Method 'PUT' -InFile $FilePath -Uri 'https://share.dev0.sh/upload/TechSupport_Specs.txt' -UseBasicParsing

#Write the link generated by the server to the clipboard and inform the user of how to use it
set-clipboard $link.Content
msg console /server:localhost "The link to share the results is now in your clipboard, just paste into the chat to share it."